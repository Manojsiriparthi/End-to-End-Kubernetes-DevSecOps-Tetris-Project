{"ast":null,"code":"import { createState } from \"./State.js\";\nconst createTetris = ({\n  height,\n  width\n} = {\n  height: 20,\n  width: 10\n}) => {\n  const _height = height;\n  const _width = width;\n  const state = createState(_height, _width);\n  let timer = null;\n  const stateChangeListeners = [];\n  state.onLevelChange(level => startTimer(timer, calculateSpeedForCurrentLevel(level)));\n  const startTimer = (timer, delay) => {\n    if (timer != null) {\n      clearInterval(timer);\n    }\n    const newTimer = setInterval(tick, delay);\n    return newTimer;\n  };\n  const stopTimer = timer => {\n    if (timer != null) {\n      clearInterval(timer);\n    }\n  };\n  const calculateSpeedForCurrentLevel = level => {\n    return Math.floor(900 * Math.pow(0.9, level - 1));\n  };\n\n  //eslint-disable-next-line no-unused-vars\n  const toString = () => {\n    let str = state.visibleMatrix().map(row => {\n      return row.map(tetromino => {\n        if (tetromino.isFilled()) {\n          return tetromino.color;\n        } else {\n          return tetromino.state;\n        }\n      }).join(\",\");\n    }).join(\"\\n\");\n    return str;\n  };\n  const tick = () => {\n    if (!state.isRunning()) {\n      return;\n    }\n    state.moveCurrentPieceDown();\n    if (state.isGameOver()) {\n      stopTimer(timer);\n    }\n    notifyOnStateChangeListeners();\n  };\n  const notifyOnStateChangeListeners = () => {\n    stateChangeListeners.forEach(fn => fn({\n      ...state\n    }));\n  };\n  const resume = () => {\n    state.resume();\n    notifyOnStateChangeListeners();\n    timer = startTimer(timer, calculateSpeedForCurrentLevel(state.level()));\n  };\n  const start = () => {\n    if (state.isStarted()) {\n      return;\n    }\n    state.start();\n    notifyOnStateChangeListeners();\n    timer = startTimer(timer, calculateSpeedForCurrentLevel(state.level()));\n  };\n  const pause = () => {\n    if (state.isPaused()) {\n      return;\n    }\n    if (timer != null) {\n      clearInterval(timer);\n    }\n    state.pause();\n    stopTimer(timer);\n    notifyOnStateChangeListeners();\n  };\n  const isPaused = () => {\n    return state.isPaused();\n  };\n  const moveLeft = () => {\n    state.moveLeft();\n    notifyOnStateChangeListeners();\n  };\n  const moveRight = () => {\n    state.moveRight();\n    notifyOnStateChangeListeners();\n  };\n  const rotateCurrentPiece = () => {\n    state.rotateCurrentPiece();\n    notifyOnStateChangeListeners();\n  };\n  return {\n    onStateChange(fn) {\n      stateChangeListeners.push(fn);\n    },\n    isGameOver() {\n      return state.gameOver;\n    },\n    isRunning() {\n      return state.isRunning();\n    },\n    isStarted() {\n      return state.isStarted();\n    },\n    state,\n    rotateCurrentPiece,\n    moveLeft,\n    moveRight,\n    start,\n    pause,\n    isPaused,\n    resume,\n    tick,\n    height: _height,\n    width: _width\n  };\n};\nexport { createTetris };","map":{"version":3,"names":["createState","createTetris","height","width","_height","_width","state","timer","stateChangeListeners","onLevelChange","level","startTimer","calculateSpeedForCurrentLevel","delay","clearInterval","newTimer","setInterval","tick","stopTimer","Math","floor","pow","toString","str","visibleMatrix","map","row","tetromino","isFilled","color","join","isRunning","moveCurrentPieceDown","isGameOver","notifyOnStateChangeListeners","forEach","fn","resume","start","isStarted","pause","isPaused","moveLeft","moveRight","rotateCurrentPiece","onStateChange","push","gameOver"],"sources":["/root/End-to-End-Kubernetes-DevSecOps-Tetris-Project/Tetris-V1/src/tetris/Tetris.js"],"sourcesContent":["import {createState} from \"./State.js\";\n\n\nconst createTetris = ({height, width} = {height: 20, width:10}) => {\n    const _height = height;\n    const _width = width;\n    const state = createState(_height, _width);\n    let timer = null;\n    const stateChangeListeners = [];\n\n    state.onLevelChange((level) => startTimer(timer, calculateSpeedForCurrentLevel(level)))\n\n    const startTimer = (timer, delay) => {\n        if (timer != null) {\n            clearInterval(timer);\n        }\n\n        const newTimer = setInterval(tick, delay)\n        return newTimer;\n    };\n\n    const stopTimer = (timer) => {\n        if (timer != null) {\n            clearInterval(timer);\n        }\n    };\n\n    const calculateSpeedForCurrentLevel = (level) => {\n        return Math.floor(900 * (Math.pow(0.9, level - 1)));\n    };\n\n\n    //eslint-disable-next-line no-unused-vars\n    const toString = () => {\n        let str = state.visibleMatrix().map(row => {\n            return row.map(tetromino => {\n                if (tetromino.isFilled()) {\n                    return tetromino.color;\n                } else {\n                    return tetromino.state;\n                }\n            }).join(\",\");\n        }).join(\"\\n\");\n\n        return str;\n    };\n\n    const tick = () => {\n        if (!state.isRunning()) {\n            return;\n        }\n\n        state.moveCurrentPieceDown();\n        if(state.isGameOver()){\n            stopTimer(timer);\n        }\n        notifyOnStateChangeListeners();\n    };\n\n    const notifyOnStateChangeListeners = () => {\n        stateChangeListeners.forEach(fn => fn({...state}));\n    };\n\n    const resume = () => {\n        state.resume();\n        notifyOnStateChangeListeners();\n        timer = startTimer(timer, calculateSpeedForCurrentLevel(state.level()));\n\n    };\n\n    const start = () => {\n        if (state.isStarted()) {\n            return;\n        }\n        state.start();\n        notifyOnStateChangeListeners();\n        timer = startTimer(timer, calculateSpeedForCurrentLevel(state.level()));\n    };\n\n    const pause = () => {\n        if (state.isPaused()) {\n            return;\n        }\n        if (timer != null) {\n            clearInterval(timer);\n        }\n        state.pause();\n        stopTimer(timer);\n        notifyOnStateChangeListeners();\n    };\n\n    const isPaused = () => {\n        return state.isPaused();\n    }\n\n    const moveLeft = () => {\n        state.moveLeft();\n        notifyOnStateChangeListeners();\n    };\n\n    const moveRight = () => {\n        state.moveRight();\n        notifyOnStateChangeListeners();\n    }\n\n    const rotateCurrentPiece = () => {\n        state.rotateCurrentPiece();\n        notifyOnStateChangeListeners();\n    }\n\n\n\n    return {\n        onStateChange(fn) {\n            stateChangeListeners.push(fn);\n        },\n    \n        isGameOver()  {\n            return state.gameOver;\n        },\n    \n        isRunning() {\n            return state.isRunning();\n        },\n    \n        isStarted() {\n            return state.isStarted();\n        },\n        state,\n        rotateCurrentPiece,\n        moveLeft,\n        moveRight,\n        start,\n        pause,\n        isPaused,\n        resume,\n        tick,\n        height: _height,\n        width: _width\n    };\n\n};\n\nexport {createTetris}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}